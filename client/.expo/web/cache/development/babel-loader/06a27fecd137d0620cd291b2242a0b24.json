{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport Details from \"./Details\";\nimport Home from \"./Home\";\nimport { useDispatch } from \"react-redux\";\nimport { GET_DATA } from \"../utils\";\nimport { useQuery } from \"@apollo/client\";\nimport { setStatus, setNFT } from \"../store/Features\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function MainApp() {\n  var _useQuery = useQuery(GET_DATA),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (loading) {\n      dispatch(setStatus(\"loading\"));\n    } else if (error) {\n      dispatch(setStatus(\"error\"));\n      throw new Error(\"Something went wrong\", error);\n    } else {\n      dispatch(setStatus(\"success\"));\n      dispatch(setNFT(data.nft));\n    }\n  }, []);\n  return _jsxs(Stack.Navigator, {\n    initialRouteName: \"Home\",\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Home\",\n      component: Home\n    }), _jsx(Stack.Screen, {\n      name: \"Details\",\n      component: Details\n    })]\n  });\n}","map":{"version":3,"names":["React","useEffect","Details","Home","useDispatch","GET_DATA","useQuery","setStatus","setNFT","createNativeStackNavigator","Stack","MainApp","loading","error","data","dispatch","Error","nft","headerShown"],"sources":["C:/Users/Kashif/Desktop/Working/NFT-App/client/screens/index.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Details from \"./Details\";\r\nimport Home from \"./Home\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { GET_DATA } from \"../utils\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { setStatus, setNFT } from \"../store/Features\";\r\n\r\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\r\nconst Stack = createNativeStackNavigator(); // or createNativeStackNavigator\r\nexport default function MainApp() {\r\n  const { loading, error, data } = useQuery(GET_DATA);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (loading) {\r\n      dispatch(setStatus(\"loading\"));\r\n    } else if (error) {\r\n      dispatch(setStatus(\"error\"));\r\n      throw new Error(\"Something went wrong\", error);\r\n    } else {\r\n      dispatch(setStatus(\"success\"));\r\n      dispatch(setNFT(data.nft));\r\n    }\r\n  }, []);\r\n  return (\r\n    <Stack.Navigator\r\n      initialRouteName=\"Home\"\r\n      screenOptions={{\r\n        headerShown: false,\r\n      }}\r\n    >\r\n      <Stack.Screen name=\"Home\" component={Home} />\r\n      <Stack.Screen name=\"Details\" component={Details} />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP;AACA,OAAOC,IAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,SAAT,EAAoBC,MAApB;AAEA,SAASC,0BAAT,QAA2C,gCAA3C;;;AACA,IAAMC,KAAK,GAAGD,0BAA0B,EAAxC;AACA,eAAe,SAASE,OAAT,GAAmB;EAChC,gBAAiCL,QAAQ,CAACD,QAAD,CAAzC;EAAA,IAAQO,OAAR,aAAQA,OAAR;EAAA,IAAiBC,KAAjB,aAAiBA,KAAjB;EAAA,IAAwBC,IAAxB,aAAwBA,IAAxB;;EACA,IAAMC,QAAQ,GAAGX,WAAW,EAA5B;EACAH,SAAS,CAAC,YAAM;IACd,IAAIW,OAAJ,EAAa;MACXG,QAAQ,CAACR,SAAS,CAAC,SAAD,CAAV,CAAR;IACD,CAFD,MAEO,IAAIM,KAAJ,EAAW;MAChBE,QAAQ,CAACR,SAAS,CAAC,OAAD,CAAV,CAAR;MACA,MAAM,IAAIS,KAAJ,CAAU,sBAAV,EAAkCH,KAAlC,CAAN;IACD,CAHM,MAGA;MACLE,QAAQ,CAACR,SAAS,CAAC,SAAD,CAAV,CAAR;MACAQ,QAAQ,CAACP,MAAM,CAACM,IAAI,CAACG,GAAN,CAAP,CAAR;IACD;EACF,CAVQ,EAUN,EAVM,CAAT;EAWA,OACE,MAAC,KAAD,CAAO,SAAP;IACE,gBAAgB,EAAC,MADnB;IAEE,aAAa,EAAE;MACbC,WAAW,EAAE;IADA,CAFjB;IAAA,WAME,KAAC,KAAD,CAAO,MAAP;MAAc,IAAI,EAAC,MAAnB;MAA0B,SAAS,EAAEf;IAArC,EANF,EAOE,KAAC,KAAD,CAAO,MAAP;MAAc,IAAI,EAAC,SAAnB;MAA6B,SAAS,EAAED;IAAxC,EAPF;EAAA,EADF;AAWD"},"metadata":{},"sourceType":"module"}